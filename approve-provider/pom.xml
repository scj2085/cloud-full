<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.cloud</groupId>
	<artifactId>approve-provider</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>approve-provider</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
	</properties>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.3.5.RELEASE</version>
	</parent>

	<!--把日常开发生成的快照版本构件直接部署到nexus中策略为Snapshot的宿主仓库中，项目正式发布的构件部署到nexus中策略为Release的宿主仓库中，为了能够部署设置认证信息在settings.xml中的<server>元素id和此id相同的 -->
	<distributionManagement>
		<repository><!-- 发布版本构件的仓库 -->
			<id>nexus-releases</id><!-- 私服中发布版本构件的宿主仓库id -->
			<name>Nexus Releases Repository</name><!-- 发布版本构件的宿主仓库名 -->
			<url>http://192.168.190.3:8081/nexus/content/repositories/releases</url><!-- 
				私服中发布版本构件的宿主仓库url -->
		</repository>
		<snapshotRepository><!-- 私服中快件版本的宿主仓库 -->
			<id>nexus-snapshots</id><!-- 私服中快件版本的宿主仓库 id -->
			<name>Nexus Snapshot Repository</name><!-- 私服中快件版本的宿主仓库名称 -->
			<url>http://192.168.190.3:8081/nexus/comtent/repositories/snapshots</url><!-- 
				私服中快件版本的宿主仓库 url -->
		</snapshotRepository>
	</distributionManagement>
	<!-- 这里只是针对当前maven项目有效 ，在settings.xml中通过profile机制，将仓库配置放到settings.xml中的profile中，让本机所有的maven项目都使用自己的maven私服 -->
	<!-- <repositories> -->
	<!-- <repository>声明一个或者多个远程仓库 -->
	<!-- <id>nexus</id>任何一个仓库声明的id必须 是唯一 -->
	<!-- <name>Nexus</name> -->
	<!-- <url>http://localhost:8081/nexus/content/groups/public/</url> -->
	<!-- <releases> -->
	<!-- <enabled>true</enabled>开启nexus仓库的发布版本的下载 支持 -->
	<!-- </releases> -->
	<!-- <snapshots> -->
	<!-- <enabled>true</enabled>false是关闭nexus仓库的快照版本的下载支持 -->
	<!-- <updatePolicy>daily</updatePolicy>maven从远程仓库检查更新的频率，daily表示maven每天检查一次 -->
	<!-- <checksumPolicy>ignore</checksumPolicy>maven检查和校验的策略，当构件部署到maven仓库中时，会同时部署对应的校验和文件，在下载构件的时候，maven会校验和验证文件，如果 
		验证失败《ignore》使maven完全忽略校验和错误 -->
	<!-- </snapshots> -->
	<!-- <layout>default</layout>表示仓库的布局是maven2,maven3,不是maven1 -->
	<!-- </repository> -->
	<!-- </repositories> -->
	<!-- <pluginRepositories> -->
	<!-- <pluginRepository> -->
	<!-- <id>nexus</id> -->
	<!-- <name>Nexus</name> -->
	<!-- <url>http://localhost:8081/nexu/content/groups/public/</url> -->
	<!-- <releases> -->
	<!-- <enabled>true</enabled> -->
	<!-- </releases> -->
	<!-- <snapshots> -->
	<!-- <enabled>true</enabled> -->
	<!-- </snapshots> -->
	<!-- </pluginRepository> -->
	<!-- </pluginRepositories> -->



	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-eureka</artifactId>
		</dependency>
<!-- 		实时刷新git中的repo配置文件，监控模块，其中包含了/refresh刷新API，-->
<!-- 		通过POST请求发送到http://localhost:7002/refresh实行刷新， 后续将介绍如何通过Spring Cloud Bus来实现以消息总线的方式进行通知配置信息的变化，完成集群上的自动化更新-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Brixton.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- <build> -->
	<!-- <plugins> -->
	<!-- <plugin> -->
	<!-- <groupId>org.springframework.boot</groupId> -->
	<!-- <artifactId>spring-boot-maven-plugin</artifactId> -->
	<!-- </plugin> -->
	<!-- </plugins> -->
	<!-- </build> -->
</project>
